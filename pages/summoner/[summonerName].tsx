import SummonerDetail from "@/components/SummonerDetail";
import {
  getMatchesByIds,
  getSummonerByName,
  getSummonerMatchIds,
} from "@/helpers/api";
import { Summoner, SummonerMatch } from "@/types";
import Head from "next/head";

export async function getServerSideProps({
  params,
}: {
  params: { summonerName: string };
}): Promise<{ props: SummonerPageProps }> {
  const { summonerName } = params;
  const [summoner, error] = await getSummonerByName(summonerName);

  if (summoner) {
    const [matchIds, matchIdsError] = await getSummonerMatchIds(summoner, 15);
    const [matchesWithDetails, matchesError] = await getMatchesByIds(matchIds);

    const matches: SummonerMatch[] = matchesWithDetails.map((match) => {
      const summonerInfo = match.info.participants.find(
        (participant) => participant.puuid === summoner.puuid
      )!;

      return {
        championName: summonerInfo.championName,
        win: summonerInfo.win,
        gameCreation: match.info.gameCreation,
        weekday: new Date(match.info.gameCreation).toLocaleDateString("en", {
          weekday: "long",
        }),
      };
    });

    return {
      props: {
        summoner,
        matches,
        error: matchIdsError || matchesError,
      },
    };
  }

  return { props: { error: error } };
}

interface SummonerPageProps {
  summoner?: Summoner;
  matches?: SummonerMatch[];
  error?: string;
}

export default function SummonerPage({
  summoner,
  matches,
  error,
}: SummonerPageProps) {
  const title = summoner?.name ? `${summoner.name} | LOL Fax` : "LOL Fax";

  return (
    <>
      <Head>
        <title>{title}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <main className="p-5">
        {summoner && matches?.length ? (
          <SummonerDetail {...{ summoner, matches }} />
        ) : (
          error
        )}
      </main>
    </>
  );
}
